// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: petstore/v3/pet.proto

package petstorev3connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v3 "petstore/gen/petstore/v3"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PetServiceName is the fully-qualified name of the PetService service.
	PetServiceName = "petstore.v3.PetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PetServiceUpdatePetProcedure is the fully-qualified name of the PetService's UpdatePet RPC.
	PetServiceUpdatePetProcedure = "/petstore.v3.PetService/UpdatePet"
	// PetServiceAddPetProcedure is the fully-qualified name of the PetService's AddPet RPC.
	PetServiceAddPetProcedure = "/petstore.v3.PetService/AddPet"
	// PetServiceFindPetsByStatusProcedure is the fully-qualified name of the PetService's
	// FindPetsByStatus RPC.
	PetServiceFindPetsByStatusProcedure = "/petstore.v3.PetService/FindPetsByStatus"
	// PetServiceFindPetsByTagsProcedure is the fully-qualified name of the PetService's FindPetsByTags
	// RPC.
	PetServiceFindPetsByTagsProcedure = "/petstore.v3.PetService/FindPetsByTags"
	// PetServiceFindPetProcedure is the fully-qualified name of the PetService's FindPet RPC.
	PetServiceFindPetProcedure = "/petstore.v3.PetService/FindPet"
	// PetServiceDeletePetProcedure is the fully-qualified name of the PetService's DeletePet RPC.
	PetServiceDeletePetProcedure = "/petstore.v3.PetService/DeletePet"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	petServiceServiceDescriptor                = v3.File_petstore_v3_pet_proto.Services().ByName("PetService")
	petServiceUpdatePetMethodDescriptor        = petServiceServiceDescriptor.Methods().ByName("UpdatePet")
	petServiceAddPetMethodDescriptor           = petServiceServiceDescriptor.Methods().ByName("AddPet")
	petServiceFindPetsByStatusMethodDescriptor = petServiceServiceDescriptor.Methods().ByName("FindPetsByStatus")
	petServiceFindPetsByTagsMethodDescriptor   = petServiceServiceDescriptor.Methods().ByName("FindPetsByTags")
	petServiceFindPetMethodDescriptor          = petServiceServiceDescriptor.Methods().ByName("FindPet")
	petServiceDeletePetMethodDescriptor        = petServiceServiceDescriptor.Methods().ByName("DeletePet")
)

// PetServiceClient is a client for the petstore.v3.PetService service.
type PetServiceClient interface {
	UpdatePet(context.Context, *connect.Request[v3.UpdatePetRequest]) (*connect.Response[v3.UpdatePetResponse], error)
	AddPet(context.Context, *connect.Request[v3.AddPetRequest]) (*connect.Response[v3.AddPetResponse], error)
	FindPetsByStatus(context.Context, *connect.Request[v3.FindPetsByStatusRequest]) (*connect.Response[v3.FindPetsByStatusResponse], error)
	FindPetsByTags(context.Context, *connect.Request[v3.FindPetsByTagsRequest]) (*connect.Response[v3.FindPetsByTagsResponse], error)
	FindPet(context.Context, *connect.Request[v3.FindPetRequest]) (*connect.Response[v3.FindPetResponse], error)
	DeletePet(context.Context, *connect.Request[v3.DeletePetRequest]) (*connect.Response[v3.DeletePetResponse], error)
}

// NewPetServiceClient constructs a client for the petstore.v3.PetService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &petServiceClient{
		updatePet: connect.NewClient[v3.UpdatePetRequest, v3.UpdatePetResponse](
			httpClient,
			baseURL+PetServiceUpdatePetProcedure,
			connect.WithSchema(petServiceUpdatePetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addPet: connect.NewClient[v3.AddPetRequest, v3.AddPetResponse](
			httpClient,
			baseURL+PetServiceAddPetProcedure,
			connect.WithSchema(petServiceAddPetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		findPetsByStatus: connect.NewClient[v3.FindPetsByStatusRequest, v3.FindPetsByStatusResponse](
			httpClient,
			baseURL+PetServiceFindPetsByStatusProcedure,
			connect.WithSchema(petServiceFindPetsByStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		findPetsByTags: connect.NewClient[v3.FindPetsByTagsRequest, v3.FindPetsByTagsResponse](
			httpClient,
			baseURL+PetServiceFindPetsByTagsProcedure,
			connect.WithSchema(petServiceFindPetsByTagsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		findPet: connect.NewClient[v3.FindPetRequest, v3.FindPetResponse](
			httpClient,
			baseURL+PetServiceFindPetProcedure,
			connect.WithSchema(petServiceFindPetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePet: connect.NewClient[v3.DeletePetRequest, v3.DeletePetResponse](
			httpClient,
			baseURL+PetServiceDeletePetProcedure,
			connect.WithSchema(petServiceDeletePetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// petServiceClient implements PetServiceClient.
type petServiceClient struct {
	updatePet        *connect.Client[v3.UpdatePetRequest, v3.UpdatePetResponse]
	addPet           *connect.Client[v3.AddPetRequest, v3.AddPetResponse]
	findPetsByStatus *connect.Client[v3.FindPetsByStatusRequest, v3.FindPetsByStatusResponse]
	findPetsByTags   *connect.Client[v3.FindPetsByTagsRequest, v3.FindPetsByTagsResponse]
	findPet          *connect.Client[v3.FindPetRequest, v3.FindPetResponse]
	deletePet        *connect.Client[v3.DeletePetRequest, v3.DeletePetResponse]
}

// UpdatePet calls petstore.v3.PetService.UpdatePet.
func (c *petServiceClient) UpdatePet(ctx context.Context, req *connect.Request[v3.UpdatePetRequest]) (*connect.Response[v3.UpdatePetResponse], error) {
	return c.updatePet.CallUnary(ctx, req)
}

// AddPet calls petstore.v3.PetService.AddPet.
func (c *petServiceClient) AddPet(ctx context.Context, req *connect.Request[v3.AddPetRequest]) (*connect.Response[v3.AddPetResponse], error) {
	return c.addPet.CallUnary(ctx, req)
}

// FindPetsByStatus calls petstore.v3.PetService.FindPetsByStatus.
func (c *petServiceClient) FindPetsByStatus(ctx context.Context, req *connect.Request[v3.FindPetsByStatusRequest]) (*connect.Response[v3.FindPetsByStatusResponse], error) {
	return c.findPetsByStatus.CallUnary(ctx, req)
}

// FindPetsByTags calls petstore.v3.PetService.FindPetsByTags.
func (c *petServiceClient) FindPetsByTags(ctx context.Context, req *connect.Request[v3.FindPetsByTagsRequest]) (*connect.Response[v3.FindPetsByTagsResponse], error) {
	return c.findPetsByTags.CallUnary(ctx, req)
}

// FindPet calls petstore.v3.PetService.FindPet.
func (c *petServiceClient) FindPet(ctx context.Context, req *connect.Request[v3.FindPetRequest]) (*connect.Response[v3.FindPetResponse], error) {
	return c.findPet.CallUnary(ctx, req)
}

// DeletePet calls petstore.v3.PetService.DeletePet.
func (c *petServiceClient) DeletePet(ctx context.Context, req *connect.Request[v3.DeletePetRequest]) (*connect.Response[v3.DeletePetResponse], error) {
	return c.deletePet.CallUnary(ctx, req)
}

// PetServiceHandler is an implementation of the petstore.v3.PetService service.
type PetServiceHandler interface {
	UpdatePet(context.Context, *connect.Request[v3.UpdatePetRequest]) (*connect.Response[v3.UpdatePetResponse], error)
	AddPet(context.Context, *connect.Request[v3.AddPetRequest]) (*connect.Response[v3.AddPetResponse], error)
	FindPetsByStatus(context.Context, *connect.Request[v3.FindPetsByStatusRequest]) (*connect.Response[v3.FindPetsByStatusResponse], error)
	FindPetsByTags(context.Context, *connect.Request[v3.FindPetsByTagsRequest]) (*connect.Response[v3.FindPetsByTagsResponse], error)
	FindPet(context.Context, *connect.Request[v3.FindPetRequest]) (*connect.Response[v3.FindPetResponse], error)
	DeletePet(context.Context, *connect.Request[v3.DeletePetRequest]) (*connect.Response[v3.DeletePetResponse], error)
}

// NewPetServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPetServiceHandler(svc PetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	petServiceUpdatePetHandler := connect.NewUnaryHandler(
		PetServiceUpdatePetProcedure,
		svc.UpdatePet,
		connect.WithSchema(petServiceUpdatePetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	petServiceAddPetHandler := connect.NewUnaryHandler(
		PetServiceAddPetProcedure,
		svc.AddPet,
		connect.WithSchema(petServiceAddPetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	petServiceFindPetsByStatusHandler := connect.NewUnaryHandler(
		PetServiceFindPetsByStatusProcedure,
		svc.FindPetsByStatus,
		connect.WithSchema(petServiceFindPetsByStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	petServiceFindPetsByTagsHandler := connect.NewUnaryHandler(
		PetServiceFindPetsByTagsProcedure,
		svc.FindPetsByTags,
		connect.WithSchema(petServiceFindPetsByTagsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	petServiceFindPetHandler := connect.NewUnaryHandler(
		PetServiceFindPetProcedure,
		svc.FindPet,
		connect.WithSchema(petServiceFindPetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	petServiceDeletePetHandler := connect.NewUnaryHandler(
		PetServiceDeletePetProcedure,
		svc.DeletePet,
		connect.WithSchema(petServiceDeletePetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/petstore.v3.PetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PetServiceUpdatePetProcedure:
			petServiceUpdatePetHandler.ServeHTTP(w, r)
		case PetServiceAddPetProcedure:
			petServiceAddPetHandler.ServeHTTP(w, r)
		case PetServiceFindPetsByStatusProcedure:
			petServiceFindPetsByStatusHandler.ServeHTTP(w, r)
		case PetServiceFindPetsByTagsProcedure:
			petServiceFindPetsByTagsHandler.ServeHTTP(w, r)
		case PetServiceFindPetProcedure:
			petServiceFindPetHandler.ServeHTTP(w, r)
		case PetServiceDeletePetProcedure:
			petServiceDeletePetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPetServiceHandler struct{}

func (UnimplementedPetServiceHandler) UpdatePet(context.Context, *connect.Request[v3.UpdatePetRequest]) (*connect.Response[v3.UpdatePetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("petstore.v3.PetService.UpdatePet is not implemented"))
}

func (UnimplementedPetServiceHandler) AddPet(context.Context, *connect.Request[v3.AddPetRequest]) (*connect.Response[v3.AddPetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("petstore.v3.PetService.AddPet is not implemented"))
}

func (UnimplementedPetServiceHandler) FindPetsByStatus(context.Context, *connect.Request[v3.FindPetsByStatusRequest]) (*connect.Response[v3.FindPetsByStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("petstore.v3.PetService.FindPetsByStatus is not implemented"))
}

func (UnimplementedPetServiceHandler) FindPetsByTags(context.Context, *connect.Request[v3.FindPetsByTagsRequest]) (*connect.Response[v3.FindPetsByTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("petstore.v3.PetService.FindPetsByTags is not implemented"))
}

func (UnimplementedPetServiceHandler) FindPet(context.Context, *connect.Request[v3.FindPetRequest]) (*connect.Response[v3.FindPetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("petstore.v3.PetService.FindPet is not implemented"))
}

func (UnimplementedPetServiceHandler) DeletePet(context.Context, *connect.Request[v3.DeletePetRequest]) (*connect.Response[v3.DeletePetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("petstore.v3.PetService.DeletePet is not implemented"))
}
