// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: petstore/v3/store.proto

package petstorev3connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v3 "petstore/gen/petstore/v3"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StoreServiceName is the fully-qualified name of the StoreService service.
	StoreServiceName = "petstore.v3.StoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StoreServiceAddStoreOrderProcedure is the fully-qualified name of the StoreService's
	// AddStoreOrder RPC.
	StoreServiceAddStoreOrderProcedure = "/petstore.v3.StoreService/AddStoreOrder"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	storeServiceServiceDescriptor             = v3.File_petstore_v3_store_proto.Services().ByName("StoreService")
	storeServiceAddStoreOrderMethodDescriptor = storeServiceServiceDescriptor.Methods().ByName("AddStoreOrder")
)

// StoreServiceClient is a client for the petstore.v3.StoreService service.
type StoreServiceClient interface {
	AddStoreOrder(context.Context, *connect.Request[v3.AddStoreOrderRequest]) (*connect.Response[v3.AddStoreOrderResponse], error)
}

// NewStoreServiceClient constructs a client for the petstore.v3.StoreService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storeServiceClient{
		addStoreOrder: connect.NewClient[v3.AddStoreOrderRequest, v3.AddStoreOrderResponse](
			httpClient,
			baseURL+StoreServiceAddStoreOrderProcedure,
			connect.WithSchema(storeServiceAddStoreOrderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// storeServiceClient implements StoreServiceClient.
type storeServiceClient struct {
	addStoreOrder *connect.Client[v3.AddStoreOrderRequest, v3.AddStoreOrderResponse]
}

// AddStoreOrder calls petstore.v3.StoreService.AddStoreOrder.
func (c *storeServiceClient) AddStoreOrder(ctx context.Context, req *connect.Request[v3.AddStoreOrderRequest]) (*connect.Response[v3.AddStoreOrderResponse], error) {
	return c.addStoreOrder.CallUnary(ctx, req)
}

// StoreServiceHandler is an implementation of the petstore.v3.StoreService service.
type StoreServiceHandler interface {
	AddStoreOrder(context.Context, *connect.Request[v3.AddStoreOrderRequest]) (*connect.Response[v3.AddStoreOrderResponse], error)
}

// NewStoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoreServiceHandler(svc StoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storeServiceAddStoreOrderHandler := connect.NewUnaryHandler(
		StoreServiceAddStoreOrderProcedure,
		svc.AddStoreOrder,
		connect.WithSchema(storeServiceAddStoreOrderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/petstore.v3.StoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StoreServiceAddStoreOrderProcedure:
			storeServiceAddStoreOrderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStoreServiceHandler struct{}

func (UnimplementedStoreServiceHandler) AddStoreOrder(context.Context, *connect.Request[v3.AddStoreOrderRequest]) (*connect.Response[v3.AddStoreOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("petstore.v3.StoreService.AddStoreOrder is not implemented"))
}
