{{- define "Service" }}
// Code generated by protoc-gen-oas2connect. DO NOT EDIT.

package {{ .PackageName }}

import (
	"bytes"
	"encoding/json"
	"log"
	"net/http"

	connect "{{ .ConnectPackagePath }}"
	pb "{{ .ProtoPackagePath }}"
)

{{- range .Services }}
{{- $service := . }}

func Register{{ $service.Name }}Endpoints(mux *http.ServeMux, svc connect.{{ $service.Name }}Handler) {
	path, handler := connect.New{{ $service.Name }}Handler(svc)
	{{- range $service.Methods }}
	{{- $method := . }}
	mux.HandleFunc(New{{ $service.Name }}{{ $method.Name }}Handler(path, handler))
	{{- end }}
	log.Printf("registered {{ $service.Methods | len }} endpoints of {{ $service.Name }}")
}

{{- range $service.Methods }}
{{- $method := . }}
func New{{ $service.Name }}{{ $method.Name }}Handler(protoPath string, protoHandler http.Handler) (string, func(http.ResponseWriter, *http.Request)) {
	return "{{ $method.HTTPMethod }} {{ $method.HTTPPath }}", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		pbr := pb.{{ $method.Request.Name }}{}

		{{- if $method.Request.ExpectBody }}
		dec := json.NewDecoder(r.Body)
		defer r.Body.Close()
		if err := dec.Decode(&pbr); err != nil {
			log.Printf("failed to decode request body: %v", err)
			http.Error(w, "invalid request body", http.StatusBadRequest)
			return
		}
		{{- end }}

		{{- range $method.Request.Fields }}
		{{- $field := . }}

		{{- if $field.Repeated }}

		if rawParams, ok := r.URL.Query()["{{ $field.Name }}"]; ok {
			params := make([]{{ $field.GoType }}, len(rawParams))
			for _, rp := range rawParams {
				v, err := To{{ $field.GoType | ToCamel }}(rp)
				if err != nil {
					http.Error(w, "invalid {{ $field.Name }}", http.StatusBadRequest)
					return
				}
				params = append(params, v)
			}
			pbr.{{ $field.Name }} = params
		}

		{{- else }}{{/* if not $field.Repeated */}}

		{{- $getValue := "" }}
		{{- if eq $field.ParamType "query" }}
		{{- $getValue = printf `r.URL.Query().Get("%s")` $field.Name }}
		{{- else if eq $field.ParamType "path" }}
		{{- $getValue = printf `r.PathValue("%s")` $field.Name }}
		{{- end }}

		if v, err := To{{ $field.GoType | ToCamel }}({{ $getValue }}); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		} else {
			pbr.{{ $field.Name }} = v
		}

		{{- end }}{{/* if $field.Repeated */}}

		{{- end }}{{/* range $method.Request.Fields */}}

		var cb bytes.Buffer
		json.NewEncoder(&cb).Encode(&pbr)

		cr, err := http.NewRequest(http.MethodPost, protoPath+"{{ $method.Name }}", &cb)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		cr.Header.Set("content-type", "application/json")

		protoHandler.ServeHTTP(w, cr)
	})
}
{{- end }}{{/* range $service.Methods */}}
{{- end }}{{/* range .Services */}}

{{- end }}{{/* define "Service" */}}
