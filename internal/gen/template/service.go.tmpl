{{- define "Service" }}
// Code generated by protoc-gen-oas2connect. DO NOT EDIT.

package {{ .PackageName }}

import (
	"bytes"
	"encoding/json"
	"io"
	"log"
	"net/http"

	connect "{{ .ConnectPackagePath }}"
	pb "{{ .ProtoPackagePath }}"

	"google.golang.org/protobuf/encoding/protojson"
)

{{- range .Services }}
{{- $service := . }}

func Register{{ $service.Name }}Endpoints(mux ServeMux, svc connect.{{ $service.Name }}Handler, middleware Middleware) {
	path, handler := connect.New{{ $service.Name }}Handler(svc)

	mid := middleware
	if mid == nil {
		mid = NoopMiddleware
	}

	{{- range $service.Methods }}
	{{- $method := . }}
	mux.Handle(New{{ $service.Name }}{{ $method.Name }}Handler(path, handler, mid))
	{{- end }}
	log.Printf("registered {{ $service.Methods | len }} endpoints of {{ $service.Name }}")
}

{{- range $service.Methods }}
{{- $method := . }}
func New{{ $service.Name }}{{ $method.Name }}Handler(protoPath string, protoHandler http.Handler, mid Middleware) (string, http.Handler) {
	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		{{- if $method.Request.ExpectBody }}
		buf := new(bytes.Buffer)
		{{- else }}
		buf := io.Discard
		{{- end }}
		if r.Body != nil {
			defer r.Body.Close()
			_, err := io.Copy(buf, r.Body)
			if err != nil {
				log.Printf("failed to read request body: %v", err)
				http.Error(w, "internal server error", http.StatusInternalServerError)
				return
			}
		}

		pbr := pb.{{ $method.Request.Name }}{}

		{{- if $method.Request.ExpectBody }}
		body := buf.Bytes()
		if err := protojson.Unmarshal(body, &pbr); err != nil {
			log.Printf("failed to decode request body: %v", err)
			http.Error(w, "invalid request body", http.StatusBadRequest)
			return
		}
		{{- end }}

		{{- range $method.Request.Fields }}
		{{- $field := . }}

		{{- if $field.Repeated }}

		if rawParams, ok := r.URL.Query()["{{ $field.Name }}"]; ok {
			params := make([]{{ $field.GoType }}, len(rawParams))
			for _, rp := range rawParams {
				v, err := To{{ $field.GoType | ToCamel }}(rp)
				if err != nil {
					http.Error(w, "invalid {{ $field.Name }}", http.StatusBadRequest)
					return
				}
				params = append(params, v)
			}
			pbr.{{ $field.GoName }} = params
		}

		{{- else }}{{/* if not $field.Repeated */}}

		{{- $getValue := "" }}
		{{- if eq $field.ParamType "query" }}
		{{- $getValue = printf `r.URL.Query().Get("%s")` $field.Name }}
		{{- else if eq $field.ParamType "path" }}
		{{- $getValue = printf `r.PathValue("%s")` $field.Name }}
		{{- end }}

		{{- if $field.Optional }}

		if v := {{ $getValue }}; v != "" {
			if vv, err := To{{ $field.GoType | ToCamel }}(v); err != nil {
				log.Printf("failed to convert {{ $field.Name }}=%s: %v", v, err)
				http.Error(w, "invalid {{ $field.Name }}", http.StatusBadRequest)
				return
			} else {
				pbr.{{ $field.GoName }} = &vv
			}
		}

		{{- else }}{{/* if not $field.Optional */}}

		if v, err := To{{ $field.GoType | ToCamel }}({{ $getValue }}); err != nil {
			log.Printf("failed to convert {{ $field.Name }}=%s: %v", {{ $getValue }}, err)
			http.Error(w, "invalid {{ $field.Name }}", http.StatusBadRequest)
			return
		} else {
			pbr.{{ $field.GoName }} = v
		}

		{{- end }}{{/* if $field.Optional */}}
		{{- end }}{{/* if $field.Repeated */}}

		{{- end }}{{/* range $method.Request.Fields */}}

		var cb bytes.Buffer
		json.NewEncoder(&cb).Encode(&pbr)

		cr, err := http.NewRequest(http.MethodPost, protoPath+"{{ $method.Name }}", &cb)
		if err != nil {
			log.Printf("error on pass request to connect: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			return
		}
		cr.Header.Set("content-type", "application/json")

		protoHandler.ServeHTTP(w, cr.WithContext(r.Context()))
	})

	return "{{ $method.HTTPMethod }} {{ $method.HTTPPath }}", mid(handler)
}
{{- end }}{{/* range $service.Methods */}}
{{- end }}{{/* range .Services */}}

{{- end }}{{/* define "Service" */}}
