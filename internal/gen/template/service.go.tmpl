{{- define "Service" }}
{{- $protoServiceName := .ProtoServiceName }}
package {{ .OasPackageName }}

import (
	"bytes"
	"encoding/json"
	"net/http"

	proto "{{ .ProtoPackagePath }}"
	connect "{{ .ConnectPackagePath }}"
)

type {{ $protoServiceName }}ServiceHandlerInfo struct {
	Path    string
	Handler http.Handler
}

func RegisterEndpoints(mux *http.ServeMux, svc connect.{{ $protoServiceName }}ServiceHandler) {
	path, handler := connect.New{{ $protoServiceName }}ServiceHandler(svc)
	info := &{{ $protoServiceName }}ServiceHandlerInfo{path, handler}

	{{- range .Endpoints }}
	mux.HandleFunc(New{{ .Method }}{{ .Path | PathToFuncName }}Handler(info))
	{{- end }}
}

{{- range .Endpoints }}
{{- $endpoint := . }}
{{- $protoMethod := .ProtoMethod }}
{{- $protoRequest := .ProtoMethod.Request }}
func New{{ $endpoint.Method }}{{ $endpoint.Path | PathToFuncName }}Handler(info *{{ $protoServiceName }}ServiceHandlerInfo) (string, func(http.ResponseWriter, *http.Request)) {
	return "{{ $endpoint.Method }} {{ $endpoint.Path }}", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		pbr := proto.{{ $protoRequest.Name }}{}

		// TODO: covert param type
		{{- range $protoRequest.Fields }}
		{{- $field := . }}
		{{ if eq $field.ParamType "query" }}
		pbr.{{ $protoMethod.Name | ToCamel }} = r.URL.Query().Get("{{ $field.Name }}")
		{{- else if eq $field.ParamType "path" }}
		pbr.{{ $protoMethod.Name | ToCamel }} = r.PathValue("{{ $field.Name }}")
		{{- end }}
		{{- end }}

		var cb bytes.Buffer
		json.NewEncoder(&cb).Encode(&pbr)

		cr, err := http.NewRequest(http.MethodPost, info.Path+"{{ $protoMethod.Name }}", &cb)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		cr.Header.Set("content-type", "application/json")

		info.Handler.ServeHTTP(w, cr)
	})
}
{{- end }}{{/* range .Connect.Service.Methods */}}

{{- end }}{{/* define "Service" */}}
