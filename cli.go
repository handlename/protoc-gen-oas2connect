package o2c

import (
	"flag"
	"fmt"
	"log/slog"
	"path"
	"path/filepath"
	"strings"

	"github.com/handlename/protoc-gen-oas2connect/internal/gen"
	_ "github.com/handlename/protoc-gen-oas2connect/internal/logger"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

const extension = ".oas2connect.go"
const packageSuffix = "oas2connect"

func Run() int {
	var showVersion bool
	flag.BoolVar(&showVersion, "version", false, "show version")
	flag.BoolVar(&showVersion, "v", false, "show version")
	flag.Parse()

	if showVersion {
		fmt.Printf("protoc-gen-oas2connect v%s\n", version)
		return 0
	}

	var generatedDir string
	var packageName string
	var connectPackagePath string

	var flags flag.FlagSet
	flags.StringVar(&connectPackagePath, "connect_package_path", "", "path to package path generated by connect-go")

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(plugin *protogen.Plugin) error {
		plugin.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

		for _, file := range plugin.Files {
			if !file.Generate {
				continue
			}

			modifyGeneratedGoPackageName(file)
			modifyGeneratedFilenamePrefix(file)

			generatedFile := plugin.NewGeneratedFile(file.GeneratedFilenamePrefix+extension, "")

			if err := gen.Generate(
				file,
				strings.Trim(file.GoImportPath.String(), `"`),
				connectPackagePath,
				generatedFile,
			); err != nil {
				slog.Error("failed to generate", slog.String("err", err.Error()), slog.String("file", file.Desc.Path()))
				return err
			}

			if generatedDir == "" {
				generatedDir = path.Dir(string(file.GeneratedFilenamePrefix))
			}

			if packageName == "" {
				packageName = string(file.GoPackageName)
			}
		}

		if err := gen.GenerateOther("Convert", packageName, plugin.NewGeneratedFile(generatedDir+"/convert.go", "")); err != nil {
			return err
		}

		if err := gen.GenerateOther("Types", packageName, plugin.NewGeneratedFile(generatedDir+"/types.go", "")); err != nil {
			return err
		}

		return nil
	})

	return 0
}

func modifyGeneratedGoPackageName(file *protogen.File) {
	file.GoPackageName += packageSuffix
}

func modifyGeneratedFilenamePrefix(file *protogen.File) {
	slashed := filepath.ToSlash(file.GeneratedFilenamePrefix)
	file.GeneratedFilenamePrefix = path.Join(
		path.Dir(slashed),
		string(file.GoPackageName),
		path.Base(slashed),
	)
}
